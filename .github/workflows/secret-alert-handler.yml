name: Secret Scanning Alert Handler

on:
  # Run on secret scanning alerts
  secret_scanning_alert:
    types: [created]
  # Also run TruffleHog scan on pushes and PRs
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  trufflehog-scan:
    name: TruffleHog Secret Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --only-verified

  create-alert-issue:
    name: Create Alert Issue
    if: github.event_name == 'secret_scanning_alert'
    runs-on: ubuntu-latest
    permissions:
      issues: write
      security-events: read
    steps:
      - name: Get alert details
        id: get-alert
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ALERT_NUMBER: ${{ github.event.alert.number }}
          REPO: ${{ github.repository }}
        run: |
          # Get alert details using GitHub CLI
          alert_info=$(gh api /repos/$REPO/secret-scanning/alerts/$ALERT_NUMBER)
          echo "secret_type=$(echo $alert_info | jq -r .secret_type)" >> $GITHUB_OUTPUT
          echo "state=$(echo $alert_info | jq -r .state)" >> $GITHUB_OUTPUT
          echo "html_url=$(echo $alert_info | jq -r .html_url)" >> $GITHUB_OUTPUT
          echo "location=$(echo $alert_info | jq -r .location)" >> $GITHUB_OUTPUT
          echo "severity=$(if echo $alert_info | jq -r .secret_type | grep -qi "token\|key\|password"; then echo "high"; else echo "medium"; fi)" >> $GITHUB_OUTPUT

      - name: Determine labels
        id: labels
        run: |
          # Base labels
          labels="security,secret-scanning"
          
          # Add severity label
          if [[ "${{ steps.get-alert.outputs.secret_type }}" =~ (token|key|password) ]]; then
            labels="$labels,priority:high"
          else
            labels="$labels,priority:medium"
          fi
          
          # Add type-specific label
          if [[ "${{ steps.get-alert.outputs.secret_type }}" == *"globomantics"* ]]; then
            labels="$labels,globomantics"
          elif [[ "${{ steps.get-alert.outputs.secret_type }}" == *"aws"* ]]; then
            labels="$labels,aws"
          fi
          
          echo "labels=$labels" >> $GITHUB_OUTPUT

      - name: Create issue
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          # Create a well-formatted issue with enhanced details
          gh issue create \
            --title "🚨 Secret Alert: ${{ steps.get-alert.outputs.secret_type }}" \
            --body "# 🔐 Secret Scanning Alert

            ## 📋 Alert Details
            
            | Field | Value |
            |-------|-------|
            | 🏷️ **Type** | \`${{ steps.get-alert.outputs.secret_type }}\` |
            | 📊 **Status** | \`${{ steps.get-alert.outputs.state }}\` |
            | 🔍 **Location** | \`${{ steps.get-alert.outputs.location }}\` |
            | ⚠️ **Severity** | \`${{ steps.get-alert.outputs.severity }}\` |
            | 🔗 **Alert Link** | [View Alert](${{ steps.get-alert.outputs.html_url }}) |
            
            ## 🚨 Immediate Actions Required
            
            1. 🔎 **Verify the Secret**
               - Confirm if this is a real secret
               - Check if it's still active
               - Document exposure timeline
            
            2. 🔄 **Remediation Steps**
               - [ ] Rotate the credential immediately if valid
               - [ ] Review access logs for unauthorized usage
               - [ ] Check for other locations where this secret might exist
               - [ ] Update the alert status in GitHub
            
            3. 📝 **Documentation**
               - [ ] Record incident details
               - [ ] Note any systems impacted
               - [ ] Document remediation steps taken
            
            ## 🛡️ Prevention Guidelines
            
            ### Do's ✅
            - Use GitHub Environment Secrets
            - Implement strong secret rotation policies
            - Enable branch protection rules
            - Use pre-commit hooks for local scanning
            
            ### Don'ts ❌
            - Never commit secrets to repositories
            - Avoid sharing secrets in code or comments
            - Don't store secrets in plaintext
            - Don't ignore secret scanning alerts
            
            ## 📚 Resources
            
            - [Secret Scanning Documentation](https://docs.github.com/code-security/secret-scanning)
            - [Security Best Practices](https://docs.github.com/code-security/getting-started/security-guides)
            - [Custom Pattern Guide](https://docs.github.com/code-security/secret-scanning/defining-custom-patterns-for-secret-scanning)
            
            > 🤖 This issue was automatically created by the Secret Scanning Alert Handler
            > 
            > Repository: ${{ github.repository }}
            > Alert Number: ${{ github.event.alert.number }}
            > Created: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" \
            --label "${{ steps.labels.outputs.labels }}" \
            --assignee "timothywarner"

      - name: Send Slack notification
        if: env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if [ ! -z "$SLACK_WEBHOOK_URL" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data "{
                \"blocks\": [
                  {
                    \"type\": \"header\",
                    \"text\": {
                      \"type\": \"plain_text\",
                      \"text\": \"🚨 New Secret Scanning Alert\"
                    }
                  },
                  {
                    \"type\": \"section\",
                    \"fields\": [
                      {
                        \"type\": \"mrkdwn\",
                        \"text\": \"*Type:*\n${{ steps.get-alert.outputs.secret_type }}\"
                      },
                      {
                        \"type\": \"mrkdwn\",
                        \"text\": \"*Severity:*\n${{ steps.get-alert.outputs.severity }}\"
                      }
                    ]
                  },
                  {
                    \"type\": \"section\",
                    \"text\": {
                      \"type\": \"mrkdwn\",
                      \"text\": \"<${{ steps.get-alert.outputs.html_url }}|View Alert>\"
                    }
                  }
                ]
              }" \
              $SLACK_WEBHOOK_URL
          fi 